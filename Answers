[21/9, 17:18] +91 74949 70850: def three_sum(nums):
    nums.sort()  # Sort the array first
    result = []
    
    for i in range(len(nums) - 2):
        # Avoid duplicates for the first element
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            
            if total == 0:
                result.append([nums[i], nums[left], nums[right]])
                # Avoid duplicates for the second element
                while left < right and nums[left] == nums[left + 1]:
                    left += 1
                # Avoid duplicates for the third element
                while left < right and nums[right] == nums[right - 1]:
                    right -= 1
                # Move both pointers after finding a valid triplet
                left += 1
                right -= 1
            elif total < 0:
                left += 1  # Need a larger sum
            else:
                right -= 1  # Need a smaller sum
    
    return result

# Example usage:
nums = [-1, 0, 1, 2, -1, -4]
triplets = three_sum(nums)
print(triplets)
[21/9, 17:18] +91 74949 70850: def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()  # Initialize the visited set to track visited nodes

    visited.add(start)  # Mark the current node as visited
    print(start, end=" ")  # Process the current node (printing it)

    # Recursively visit all unvisited neighbors
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Example usage:
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Start DFS from vertex 'A'
dfs(graph, 'A')
[21/9, 17:18] +91 74949 70850: # Function to insert an element at the bottom of a stack
def insert_at_bottom(stack, item):
    if len(stack) == 0:
        stack.append(item)
    else:
        # Pop all elements and hold them in the recursion stack
        temp = stack.pop()
        insert_at_bottom(stack, item)
        # Push all elements back after inserting the item at the bottom
        stack.append(temp)

# Function to reverse the stack using recursion
def reverse_stack(stack):
    if len(stack) > 0:
        # Pop the top element and reverse the remaining stack
        temp = stack.pop()
        reverse_stack(stack)
        # Insert the popped element at the bottom of the stack
        insert_at_bottom(stack, temp)

# Example usage
stack = [1, 2, 3, 4, 5]
print("Original Stack:", stack)

reverse_stack(stack)
print("Reversed Stack:", stack)
[21/9, 17:18] +91 74949 70850: /* General Styling */
body, html {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
}

header {
    background-color: #4CAF50;
    color: white;
    padding: 15px;
    text-align: center;
}

nav ul {
    list-style: none;
    padding: 0;
}

nav ul li {
    display: inline;
    margin: 0 15px;
}

nav ul li a {
    color: white;
    text-decoration: none;
    font-size: 1.2em;
}

main {
    padding: 20px;
}

#feed {
    max-width: 800px;
    margin: 0 auto;
}

.post {
    background-color: #f4f4f4;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 5px;
}

/* Responsive Design */
@media (max-width: 768px) {
    nav ul {
        display: flex;
        justify-content: space-around;
    }

    .post {
        padding: 10px;
    }

    main {
        padding: 10px;
    }
}

/* Swipe gesture styling */
.swipe-container {
    overflow: hidden;
    width: 100%;
    display: flex;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
}

.swipe-container .post {
    flex: none;
    width: 100%;
    scroll-snap-align: center;
}
[21/9, 17:18] +91 74949 70850: // Implement swipe gestures for mobile devices
document.addEventListener('DOMContentLoaded', () => {
    const feed = document.getElementById('feed');
    let startX = 0;
    let endX = 0;

    // Function to detect swipe direction
    function handleGesture() {
        if (startX > endX) {
            console.log('Swiped Left');
            // Move to next post or perform an action
        } else {
            console.log('Swiped Right');
            // Move to previous post or perform an action
        }
    }

    // Touch start event
    feed.addEventListener('touchstart', (e) => {
        startX = e.changedTouches[0].screenX;
    });

    // Touch end event
    feed.addEventListener('touchend', (e) => {
        endX = e.changedTouches[0].screenX;
        handleGesture();
    });
});
[21/9, 17:18] +91 74949 70850: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Social Media Platform</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <nav>
            <h1>SocialApp</h1>
            <ul id="menu">
                <li><a href="#">Home</a></li>
                <li><a href="#">Messages</a></li>
                <li><a href="#">Profile</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <section id="feed">
            <div class="post">
                <h2>User1</h2>
                <p>This is a post on the social media platform.</p>
            </div>
            <div class="post">
                <h2>User2</h2>
                <p>Another post with interesting content.</p>
            </div>
            <!-- Add more posts -->
        </section>
    </main>

    <footer>
        <p>&copy; 2024 SocialApp</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>
